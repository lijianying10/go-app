package app

// Code generated by go generate; DO NOT EDIT.

import (
	"testing"
)

func TestA(t *testing.T) {
	elem := A()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Download("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.Href("http://foo.com")
	elem.HrefLang("foo")
	elem.ID("foo")
	elem.Lang("foo")
	elem.Media("foo")
	elem.Ping("foo")
	elem.Rel("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Target("foo")
	elem.Title("foo")
	elem.Type("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestAbbr(t *testing.T) {
	elem := Abbr()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestAddress(t *testing.T) {
	elem := Address()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestArea(t *testing.T) {
	elem := Area()
	elem.AccessKey("foo")
	elem.Alt("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.Coords("foo")
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Download("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.Href("http://foo.com")
	elem.HrefLang("foo")
	elem.ID("foo")
	elem.Lang("foo")
	elem.Media("foo")
	elem.Rel("foo")
	elem.Role("foo")
	elem.Shape("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Target("foo")
	elem.Title("foo")
	elem.Type("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestArticle(t *testing.T) {
	elem := Article()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestAside(t *testing.T) {
	elem := Aside()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestAudio(t *testing.T) {
	elem := Audio()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoPlay(true)
	elem.AutoPlay(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.Controls(true)
	elem.Controls(false)
	elem.CrossOrigin("foo")
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Loop(true)
	elem.Loop(false)
	elem.Muted(true)
	elem.Muted(false)
	elem.Preload("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("http://foo.com")
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestB(t *testing.T) {
	elem := B()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestBase(t *testing.T) {
	elem := Base()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.Href("http://foo.com")
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Target("foo")
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestBdi(t *testing.T) {
	elem := Bdi()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestBdo(t *testing.T) {
	elem := Bdo()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestBlockquote(t *testing.T) {
	elem := Blockquote()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Cite("http://foo.com")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestBody(t *testing.T) {
	elem := Body()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAfterPrint(h)
	elem.OnBeforePrint(h)
	elem.OnBeforeUnload(h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnHashChange(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMessage(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnOffline(h)
	elem.OnOnline(h)
	elem.OnPageHide(h)
	elem.OnPageShow(h)
	elem.OnPaste(h)
	elem.OnPopState(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnStorage(h)
	elem.OnSubmit(h)
	elem.OnUnload(h)
	elem.OnWheel(h)
	elem.privateBody(Text("hello"))
}

func TestBr(t *testing.T) {
	elem := Br()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestButton(t *testing.T) {
	elem := Button()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoFocus(true)
	elem.AutoFocus(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("foo")
	elem.FormAction("foo")
	elem.FormEncType("foo")
	elem.FormMethod("foo")
	elem.FormNoValidate(true)
	elem.FormNoValidate(false)
	elem.FormTarget("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Name("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Type("foo")
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestCanvas(t *testing.T) {
	elem := Canvas()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestCaption(t *testing.T) {
	elem := Caption()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestCite(t *testing.T) {
	elem := Cite()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestCode(t *testing.T) {
	elem := Code()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestCol(t *testing.T) {
	elem := Col()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Span(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestColGroup(t *testing.T) {
	elem := ColGroup()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Span(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestData(t *testing.T) {
	elem := Data()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Value(42)
	elem.Text("hello")
}

func TestDataList(t *testing.T) {
	elem := DataList()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestDd(t *testing.T) {
	elem := Dd()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestDel(t *testing.T) {
	elem := Del()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Cite("http://foo.com")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DateTime("foo")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestDetails(t *testing.T) {
	elem := Details()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Open(true)
	elem.Open(false)
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnToggle(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestDfn(t *testing.T) {
	elem := Dfn()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestDialog(t *testing.T) {
	elem := Dialog()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Open(true)
	elem.Open(false)
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestDiv(t *testing.T) {
	elem := Div()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestDl(t *testing.T) {
	elem := Dl()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestDt(t *testing.T) {
	elem := Dt()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestElem(t *testing.T) {
	elem := Elem("div")
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.XMLNS("http://www.w3.org/2000/svg")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestElemSelfClosing(t *testing.T) {
	elem := ElemSelfClosing("div")
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.XMLNS("http://www.w3.org/2000/svg")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestEm(t *testing.T) {
	elem := Em()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestEmbed(t *testing.T) {
	elem := Embed()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("http://foo.com")
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Type("foo")
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
}

func TestFieldSet(t *testing.T) {
	elem := FieldSet()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Name("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestFigCaption(t *testing.T) {
	elem := FigCaption()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestFigure(t *testing.T) {
	elem := Figure()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestFooter(t *testing.T) {
	elem := Footer()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestForm(t *testing.T) {
	elem := Form()
	elem.AcceptCharset("foo")
	elem.AccessKey("foo")
	elem.Action("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoComplete(true)
	elem.AutoComplete(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.EncType("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Method("foo")
	elem.Name("foo")
	elem.NoValidate(true)
	elem.NoValidate(false)
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Target("foo")
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestH1(t *testing.T) {
	elem := H1()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestH2(t *testing.T) {
	elem := H2()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestH3(t *testing.T) {
	elem := H3()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestH4(t *testing.T) {
	elem := H4()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestH5(t *testing.T) {
	elem := H5()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestH6(t *testing.T) {
	elem := H6()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestHead(t *testing.T) {
	elem := Head()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Text("hello")
}

func TestHeader(t *testing.T) {
	elem := Header()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestHr(t *testing.T) {
	elem := Hr()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestHtml(t *testing.T) {
	elem := Html()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.privateBody(Text("hello"))
}

func TestI(t *testing.T) {
	elem := I()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestIFrame(t *testing.T) {
	elem := IFrame()
	elem.AccessKey("foo")
	elem.Allow("foo")
	elem.AllowFullscreen(true)
	elem.AllowFullscreen(false)
	elem.AllowPaymentRequest(true)
	elem.AllowPaymentRequest(false)
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Loading("foo")
	elem.Name("foo")
	elem.ReferrerPolicy("foo")
	elem.Role("foo")
	elem.Sandbox(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("http://foo.com")
	elem.SrcDoc("foo")
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestImg(t *testing.T) {
	elem := Img()
	elem.AccessKey("foo")
	elem.Alt("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.CrossOrigin("foo")
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.IsMap(true)
	elem.IsMap(false)
	elem.Lang("foo")
	elem.Role("foo")
	elem.Sizes("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("http://foo.com")
	elem.SrcSet("http://foo.com")
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.UseMap("foo")
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
}

func TestInput(t *testing.T) {
	elem := Input()
	elem.Accept("foo")
	elem.AccessKey("foo")
	elem.Alt("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoComplete(true)
	elem.AutoComplete(false)
	elem.AutoFocus(true)
	elem.AutoFocus(false)
	elem.Capture("foo")
	elem.Checked(true)
	elem.Checked(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.DirName("foo")
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("foo")
	elem.FormAction("foo")
	elem.FormEncType("foo")
	elem.FormMethod("foo")
	elem.FormNoValidate(true)
	elem.FormNoValidate(false)
	elem.FormTarget("foo")
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.List("foo")
	elem.Max(42)
	elem.MaxLength(42)
	elem.Min(42)
	elem.Multiple(true)
	elem.Multiple(false)
	elem.Name("foo")
	elem.Pattern("foo")
	elem.Placeholder("foo")
	elem.ReadOnly(true)
	elem.ReadOnly(false)
	elem.Required(true)
	elem.Required(false)
	elem.Role("foo")
	elem.Size(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("http://foo.com")
	elem.Step(42)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Type("foo")
	elem.Value(42)
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestIns(t *testing.T) {
	elem := Ins()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestKbd(t *testing.T) {
	elem := Kbd()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestLabel(t *testing.T) {
	elem := Label()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.For("foo")
	elem.Form("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestLegend(t *testing.T) {
	elem := Legend()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestLi(t *testing.T) {
	elem := Li()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestLink(t *testing.T) {
	elem := Link()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.CrossOrigin("foo")
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.Href("http://foo.com")
	elem.HrefLang("foo")
	elem.ID("foo")
	elem.Lang("foo")
	elem.Media("foo")
	elem.Rel("foo")
	elem.Role("foo")
	elem.Sizes("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Type("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestMain(t *testing.T) {
	elem := Main()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestMap(t *testing.T) {
	elem := Map()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Name("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestMark(t *testing.T) {
	elem := Mark()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestMeta(t *testing.T) {
	elem := Meta()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Charset("foo")
	elem.Class("foo bar")
	elem.Content("foo")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.HTTPEquiv("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Name("foo")
	elem.Property("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
}

func TestMeter(t *testing.T) {
	elem := Meter()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.High(42)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Low(42)
	elem.Max(42)
	elem.Min(42)
	elem.Optimum(42)
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestNav(t *testing.T) {
	elem := Nav()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestNoScript(t *testing.T) {
	elem := NoScript()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Text("hello")
}

func TestObject(t *testing.T) {
	elem := Object()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.Data("http://foo.com")
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("foo")
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Name("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Type("foo")
	elem.UseMap("foo")
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestOl(t *testing.T) {
	elem := Ol()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Reversed(true)
	elem.Reversed(false)
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Start(42)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Type("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestOptGroup(t *testing.T) {
	elem := OptGroup()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Label("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestOption(t *testing.T) {
	elem := Option()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Label("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Selected(true)
	elem.Selected(false)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestOutput(t *testing.T) {
	elem := Output()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.For("foo")
	elem.Form("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Name("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestP(t *testing.T) {
	elem := P()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestParam(t *testing.T) {
	elem := Param()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Name("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestPicture(t *testing.T) {
	elem := Picture()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestPre(t *testing.T) {
	elem := Pre()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestProgress(t *testing.T) {
	elem := Progress()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Max(42)
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Value(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestQ(t *testing.T) {
	elem := Q()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Cite("http://foo.com")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestRp(t *testing.T) {
	elem := Rp()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestRt(t *testing.T) {
	elem := Rt()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestRuby(t *testing.T) {
	elem := Ruby()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestS(t *testing.T) {
	elem := S()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestSamp(t *testing.T) {
	elem := Samp()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestScript(t *testing.T) {
	elem := Script()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Async(true)
	elem.Async(false)
	elem.Attr("foo", "bar")
	elem.Charset("foo")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.CrossOrigin("foo")
	elem.DataSet("foo", "bar")
	elem.Defer(true)
	elem.Defer(false)
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("http://foo.com")
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Type("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnLoad(h)
	elem.Text("hello")
}

func TestSection(t *testing.T) {
	elem := Section()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestSelect(t *testing.T) {
	elem := Select()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoFocus(true)
	elem.AutoFocus(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Multiple(true)
	elem.Multiple(false)
	elem.Name("foo")
	elem.Required(true)
	elem.Required(false)
	elem.Role("foo")
	elem.Size(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestSmall(t *testing.T) {
	elem := Small()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestSource(t *testing.T) {
	elem := Source()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Media("foo")
	elem.Role("foo")
	elem.Sizes("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("http://foo.com")
	elem.SrcSet("http://foo.com")
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Type("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
}

func TestSpan(t *testing.T) {
	elem := Span()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestStrong(t *testing.T) {
	elem := Strong()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestStyle(t *testing.T) {
	elem := Style()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Media("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Type("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoad(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestSub(t *testing.T) {
	elem := Sub()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestSummary(t *testing.T) {
	elem := Summary()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestSup(t *testing.T) {
	elem := Sup()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestTable(t *testing.T) {
	elem := Table()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestTBody(t *testing.T) {
	elem := TBody()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestTd(t *testing.T) {
	elem := Td()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ColSpan(42)
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Headers("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Rowspan(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestTemplate(t *testing.T) {
	elem := Template()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Text("hello")
}

func TestTextarea(t *testing.T) {
	elem := Textarea()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoFocus(true)
	elem.AutoFocus(false)
	elem.Class("foo bar")
	elem.Cols(42)
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.DirName("foo")
	elem.Disabled(true)
	elem.Disabled(false)
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Form("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.MaxLength(42)
	elem.Name("foo")
	elem.Placeholder("foo")
	elem.ReadOnly(true)
	elem.ReadOnly(false)
	elem.Required(true)
	elem.Required(false)
	elem.Role("foo")
	elem.Rows(42)
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Wrap("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestTFoot(t *testing.T) {
	elem := TFoot()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestTh(t *testing.T) {
	elem := Th()
	elem.Abbr("foo")
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ColSpan(42)
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Headers("foo")
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Rowspan(42)
	elem.Scope("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestTHead(t *testing.T) {
	elem := THead()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestTime(t *testing.T) {
	elem := Time()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.DateTime("foo")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestTitle(t *testing.T) {
	elem := Title()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Text("hello")
}

func TestTr(t *testing.T) {
	elem := Tr()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestU(t *testing.T) {
	elem := U()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestUl(t *testing.T) {
	elem := Ul()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestVar(t *testing.T) {
	elem := Var()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestVideo(t *testing.T) {
	elem := Video()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.AutoPlay(true)
	elem.AutoPlay(false)
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.Controls(true)
	elem.Controls(false)
	elem.CrossOrigin("foo")
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Height(42)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Loop(true)
	elem.Loop(false)
	elem.Muted(true)
	elem.Muted(false)
	elem.Poster("foo")
	elem.Preload("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Src("http://foo.com")
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")
	elem.Width(42)

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnBlur(h)
	elem.OnCanPlay(h)
	elem.OnCanPlayThrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCueChange(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnDurationChange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnLoadStart(h)
	elem.OnLoadedData(h)
	elem.OnLoadedMetaData(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRateChange(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeUpdate(h)
	elem.OnVolumeChange(h)
	elem.OnWaiting(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func TestWbr(t *testing.T) {
	elem := Wbr()
	elem.AccessKey("foo")
	elem.Aria("foo", "bar")
	elem.Attr("foo", "bar")
	elem.Class("foo bar")
	elem.ContentEditable(true)
	elem.ContentEditable(false)
	elem.DataSet("foo", "bar")
	elem.Dir("foo")
	elem.Draggable(true)
	elem.Draggable(false)
	elem.Hidden(true)
	elem.Hidden(false)
	elem.ID("foo")
	elem.Lang("foo")
	elem.Role("foo")
	elem.Spellcheck(true)
	elem.Spellcheck(false)
	elem.Style("color", "deepskyblue")
	elem.Styles(map[string]string{"color": "pink"})
	elem.TabIndex(42)
	elem.Title("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBlur(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnContextMenu(h)
	elem.OnCopy(h)
	elem.OnCut(h)
	elem.OnDblClick(h)
	elem.OnDrag(h)
	elem.OnDragEnd(h)
	elem.OnDragEnter(h)
	elem.OnDragLeave(h)
	elem.OnDragOver(h)
	elem.OnDragStart(h)
	elem.OnDrop(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeyDown(h)
	elem.OnKeyPress(h)
	elem.OnKeyUp(h)
	elem.OnMouseDown(h)
	elem.OnMouseEnter(h)
	elem.OnMouseLeave(h)
	elem.OnMouseMove(h)
	elem.OnMouseOut(h)
	elem.OnMouseOver(h)
	elem.OnMouseUp(h)
	elem.OnPaste(h)
	elem.OnReset(h)
	elem.OnScroll(h)
	elem.OnSearch(h)
	elem.OnSelect(h)
	elem.OnSubmit(h)
	elem.OnWheel(h)
	elem.Text("hello")
}

func Testvkern(t *testing.T) {
	elem := vkern()
	elem.Text("hello")
}

func TestclipPath(t *testing.T) {
	elem := clipPath()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Clippathunits("foo")
	elem.Color("foo")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")
	elem.Text("hello")
}

func Testdesc(t *testing.T) {
	elem := desc()
	elem.Class("foo")
	elem.Core("foo", "bar")
	elem.Id("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testline(t *testing.T) {
	elem := line()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Pathlength("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")
	elem.X1("foo")
	elem.X2("foo")
	elem.Y1("foo")
	elem.Y2("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testrect(t *testing.T) {
	elem := rect()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Height("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Pathlength("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.Rx("foo")
	elem.Ry("foo")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")
	elem.Width("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testellipse(t *testing.T) {
	elem := ellipse()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Cx("foo")
	elem.Cy("foo")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Pathlength("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.Rx("foo")
	elem.Ry("foo")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func TestfeSpecularLighting(t *testing.T) {
	elem := feSpecularLighting()
	elem.Class("foo")
	elem.In("foo")
	elem.Kernelunitlength("foo", "bar")
	elem.Specularconstant("foo")
	elem.Specularexponent("foo")
	elem.Style("foo")
	elem.Surfacescale("foo")
	elem.Text("hello")
}

func TestfeSpotLight(t *testing.T) {
	elem := feSpotLight()
	elem.Limitingconeangle("foo")
	elem.Pointsatx("foo")
	elem.Pointsaty("foo")
	elem.Pointsatz("foo")
	elem.Specularexponent("foo")
	elem.X("foo")
	elem.Y("foo")
	elem.Z("foo")
	elem.Text("hello")
}

func Testsvg(t *testing.T) {
	elem := svg()
	elem.Baseprofile("foo")
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Contentscripttype("foo", "bar")
	elem.Contentstyletype("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Height("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Preserveaspectratio("foo")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Version("foo")
	elem.Viewbox("foo")
	elem.Visibility("foo")
	elem.Width("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnActivate(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.OoNerror(h)
	elem.OoNresize(h)
	elem.OoNscroll(h)
	elem.OoNunload(h)
	elem.Text("hello")
}

func TestfeTurbulence(t *testing.T) {
	elem := feTurbulence()
	elem.Basefrequency("foo")
	elem.Class("foo")
	elem.Numoctaves("foo")
	elem.Seed("foo")
	elem.Stitchtiles("foo")
	elem.Style("foo")
	elem.Type("foo", "bar")
	elem.Text("hello")
}

func TestaltGlyphDef(t *testing.T) {
	elem := altGlyphDef()
	elem.Text("hello")
}

func Testdefs(t *testing.T) {
	elem := defs()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Lang("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func TestfeMerge(t *testing.T) {
	elem := feMerge()
	elem.Class("foo")
	elem.Result("foo")
	elem.Style("foo")
	elem.Text("hello")
}

func TestfeMorphology(t *testing.T) {
	elem := feMorphology()
	elem.Class("foo")
	elem.In("foo")
	elem.Operator("foo")
	elem.Radius("foo", "bar")
	elem.Style("foo")
	elem.Text("hello")
}

func Testmetadata(t *testing.T) {
	elem := metadata()
	elem.Text("hello")
}

func Testpath(t *testing.T) {
	elem := path()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.D("foo")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Pathlength("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testpolygon(t *testing.T) {
	elem := polygon()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Pathlength("foo")
	elem.PointerEvents("foo")
	elem.Points("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testtspan(t *testing.T) {
	elem := tspan()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.DominantBaseline("foo")
	elem.Dx("foo")
	elem.Dy("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Lengthadjust("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.Rotate("foo")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.TextAnchor("foo")
	elem.Textlength("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testanimate(t *testing.T) {
	elem := animate()
	elem.Accumulate("foo", "bar")
	elem.Additive("foo", "bar")
	elem.Attributename("foo")
	elem.Begin("foo")
	elem.By("foo")
	elem.Calcmode("foo", "bar")
	elem.Class("foo")
	elem.Core("foo", "bar")
	elem.Dur("foo")
	elem.End("foo")
	elem.Fill("foo")
	elem.From("foo", "bar")
	elem.Id("foo")
	elem.Keysplines("foo")
	elem.Keytimes("foo")
	elem.Max("foo")
	elem.Min("foo")
	elem.Repeatcount("foo")
	elem.Repeatdur("foo")
	elem.Restart("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.To("foo", "bar")
	elem.Values("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func TestaltGlyphItem(t *testing.T) {
	elem := altGlyphItem()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testg(t *testing.T) {
	elem := g()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func TestglyphRef(t *testing.T) {
	elem := glyphRef()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testmarker(t *testing.T) {
	elem := marker()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.MarkerEnd("foo")
	elem.MarkerMid("foo")
	elem.MarkerStart("foo")
	elem.Markerheight("foo", "bar")
	elem.Markerunits("foo", "bar")
	elem.Markerwidth("foo", "bar")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Orient("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Preserveaspectratio("foo")
	elem.Refx("foo", "bar")
	elem.Refy("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Viewbox("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestaltGlyph(t *testing.T) {
	elem := altGlyph()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeMergeNode(t *testing.T) {
	elem := feMergeNode()
	elem.Core("foo", "bar")
	elem.In("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfePointLight(t *testing.T) {
	elem := fePointLight()
	elem.X("foo")
	elem.Y("foo")
	elem.Z("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testtitle(t *testing.T) {
	elem := title()
	elem.Class("foo")
	elem.Core("foo", "bar")
	elem.Id("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testuse(t *testing.T) {
	elem := use()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Height("foo")
	elem.Href("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Viewbox("foo")
	elem.Visibility("foo")
	elem.Width("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testmpath(t *testing.T) {
	elem := mpath()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testset(t *testing.T) {
	elem := set()
	elem.Accumulate("foo", "bar")
	elem.Additive("foo", "bar")
	elem.Attributename("foo")
	elem.Begin("foo")
	elem.Class("foo")
	elem.Core("foo", "bar")
	elem.Dur("foo")
	elem.End("foo")
	elem.Fill("foo")
	elem.Id("foo")
	elem.Max("foo")
	elem.Min("foo")
	elem.Repeatcount("foo")
	elem.Repeatdur("foo")
	elem.Restart("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.To("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testa(t *testing.T) {
	elem := a()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Href("foo")
	elem.Id("foo")
	elem.Lang("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Target("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testglyph(t *testing.T) {
	elem := glyph()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeDistantLight(t *testing.T) {
	elem := feDistantLight()
	elem.Azimuth("foo")
	elem.Elevation("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeFuncA(t *testing.T) {
	elem := feFuncA()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testpattern(t *testing.T) {
	elem := pattern()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Height("foo")
	elem.Href("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Patterncontentunits("foo")
	elem.Patterntransform("foo")
	elem.Patternunits("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Preserveaspectratio("foo")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Viewbox("foo")
	elem.Visibility("foo")
	elem.Width("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeFuncB(t *testing.T) {
	elem := feFuncB()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeTile(t *testing.T) {
	elem := feTile()
	elem.Class("foo")
	elem.In("foo")
	elem.Style("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestforeignObject(t *testing.T) {
	elem := foreignObject()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Height("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")
	elem.Width("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnAbort(h)
	elem.OnActivate(h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.OoNerror(h)
	elem.OoNresize(h)
	elem.OoNscroll(h)
	elem.OoNunload(h)
	elem.Text("hello")
}

func TestanimateTransform(t *testing.T) {
	elem := animateTransform()
	elem.By("foo")
	elem.From("foo", "bar")
	elem.To("foo", "bar")
	elem.Type("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeBlend(t *testing.T) {
	elem := feBlend()
	elem.Class("foo")
	elem.In("foo")
	elem.In2("foo", "bar")
	elem.Mode("foo")
	elem.Style("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeComposite(t *testing.T) {
	elem := feComposite()
	elem.Class("foo")
	elem.In("foo")
	elem.In2("foo", "bar")
	elem.K1("foo")
	elem.K2("foo")
	elem.K3("foo")
	elem.K4("foo")
	elem.Operator("foo")
	elem.Style("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeFlood(t *testing.T) {
	elem := feFlood()
	elem.Class("foo")
	elem.FloodColor("foo")
	elem.FloodOpacity("foo")
	elem.Style("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testmask(t *testing.T) {
	elem := mask()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Height("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Maskcontentunits("foo")
	elem.Maskunits("foo")
	elem.Opacity("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")
	elem.Width("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestradialGradient(t *testing.T) {
	elem := radialGradient()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TesttextPath(t *testing.T) {
	elem := textPath()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Href("foo")
	elem.Id("foo")
	elem.Lengthadjust("foo")
	elem.Mask("foo")
	elem.Method("foo", "bar")
	elem.Opacity("foo")
	elem.Path("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Side("foo")
	elem.Spacing("foo", "bar")
	elem.Startoffset("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Textlength("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testdiscard(t *testing.T) {
	elem := discard()
	elem.Begin("foo")
	elem.Href("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testhkern(t *testing.T) {
	elem := hkern()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testsymbol(t *testing.T) {
	elem := symbol()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Height("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.Preserveaspectratio("foo")
	elem.Refx("foo", "bar")
	elem.Refy("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Viewbox("foo")
	elem.Visibility("foo")
	elem.Width("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testtref(t *testing.T) {
	elem := tref()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeDisplacementMap(t *testing.T) {
	elem := feDisplacementMap()
	elem.Class("foo")
	elem.In("foo")
	elem.In2("foo", "bar")
	elem.Scale("foo")
	elem.Style("foo")
	elem.Xchannelselector("foo")
	elem.Ychannelselector("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testfilter(t *testing.T) {
	elem := filter()
	elem.Class("foo")
	elem.Filter("foo")
	elem.Filterres("foo", "bar")
	elem.Filterunits("foo", "bar")
	elem.Height("foo")
	elem.Primitiveunits("foo", "bar")
	elem.Style("foo")
	elem.Width("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testpolyline(t *testing.T) {
	elem := polyline()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Pathlength("foo")
	elem.PointerEvents("foo")
	elem.Points("foo")
	elem.Presentation("foo", "bar")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func TestfeGaussianBlur(t *testing.T) {
	elem := feGaussianBlur()
	elem.Class("foo")
	elem.Edgemode("foo", "bar")
	elem.In("foo")
	elem.Stddeviation("foo")
	elem.Style("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testfont(t *testing.T) {
	elem := font()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Teststyle(t *testing.T) {
	elem := style()
	elem.Class("foo")
	elem.Core("foo", "bar")
	elem.Id("foo")
	elem.Media("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Title("foo", "bar")
	elem.Type("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func TestanimateMotion(t *testing.T) {
	elem := animateMotion()
	elem.Accumulate("foo", "bar")
	elem.Additive("foo", "bar")
	elem.Attributename("foo")
	elem.Begin("foo")
	elem.By("foo")
	elem.Calcmode("foo", "bar")
	elem.Class("foo")
	elem.Core("foo", "bar")
	elem.D("foo")
	elem.Dur("foo")
	elem.End("foo")
	elem.Fill("foo")
	elem.From("foo", "bar")
	elem.Id("foo")
	elem.Keypoints("foo")
	elem.Keysplines("foo")
	elem.Keytimes("foo")
	elem.Max("foo")
	elem.Min("foo")
	elem.Path("foo")
	elem.Repeatcount("foo")
	elem.Repeatdur("foo")
	elem.Restart("foo")
	elem.Rotate("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.To("foo", "bar")
	elem.Values("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func TestfeColorMatrix(t *testing.T) {
	elem := feColorMatrix()
	elem.Class("foo")
	elem.In("foo")
	elem.Style("foo")
	elem.Type("foo", "bar")
	elem.Values("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestlinearGradient(t *testing.T) {
	elem := linearGradient()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testscript(t *testing.T) {
	elem := script()
	elem.Class("foo")
	elem.Core("foo", "bar")
	elem.Href("foo")
	elem.Id("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Type("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func TestfeFuncR(t *testing.T) {
	elem := feFuncR()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeImage(t *testing.T) {
	elem := feImage()
	elem.Class("foo")
	elem.Preserveaspectratio("foo")
	elem.Style("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeOffset(t *testing.T) {
	elem := feOffset()
	elem.Class("foo")
	elem.Dx("foo")
	elem.Dy("foo")
	elem.In("foo")
	elem.Style("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeDiffuseLighting(t *testing.T) {
	elem := feDiffuseLighting()
	elem.Class("foo")
	elem.Diffuseconstant("foo")
	elem.In("foo")
	elem.Kernelunitlength("foo", "bar")
	elem.Style("foo")
	elem.Surfacescale("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testview(t *testing.T) {
	elem := view()
	elem.Preserveaspectratio("foo")
	elem.Viewbox("foo")
	elem.Viewtarget("foo", "bar")
	elem.Zoomandpan("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testcircle(t *testing.T) {
	elem := circle()
	elem.Class("foo")
	elem.ClipPath("foo")
	elem.ClipRule("foo")
	elem.Color("foo")
	elem.ColorInterpolation("foo", "bar")
	elem.ColorRendering("foo", "bar")
	elem.Conditional_processing("foo", "bar")
	elem.Core("foo", "bar")
	elem.Cursor("foo", "bar")
	elem.Cx("foo")
	elem.Cy("foo")
	elem.Display("foo")
	elem.Fill("foo")
	elem.FillOpacity("foo")
	elem.FillRule("foo")
	elem.Filter("foo")
	elem.Id("foo")
	elem.Mask("foo")
	elem.Opacity("foo")
	elem.Pathlength("foo")
	elem.PointerEvents("foo")
	elem.Presentation("foo", "bar")
	elem.R("foo")
	elem.Requiredextensions("foo", "bar")
	elem.ShapeRendering("foo")
	elem.Stroke("foo")
	elem.StrokeDasharray("foo")
	elem.StrokeDashoffset("foo")
	elem.StrokeLinecap("foo")
	elem.StrokeLinejoin("foo")
	elem.StrokeMiterlimit("foo")
	elem.StrokeOpacity("foo")
	elem.StrokeWidth("foo")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Systemlanguage("foo")
	elem.Tabindex("foo")
	elem.Transform("foo")
	elem.VectorEffect("foo")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnActivate(h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCuechange(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnFocusin(h)
	elem.OnFocusout(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func Testcursor(t *testing.T) {
	elem := cursor()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeComponentTransfer(t *testing.T) {
	elem := feComponentTransfer()
	elem.Class("foo")
	elem.In("foo")
	elem.Style("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func TestfeConvolveMatrix(t *testing.T) {
	elem := feConvolveMatrix()
	elem.Bias("foo", "bar")
	elem.Class("foo")
	elem.Divisor("foo")
	elem.Edgemode("foo", "bar")
	elem.In("foo")
	elem.Kernelmatrix("foo")
	elem.Kernelunitlength("foo", "bar")
	elem.Order("foo")
	elem.Preservealpha("foo")
	elem.Style("foo")
	elem.Targetx("foo", "bar")
	elem.Targety("foo", "bar")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Testimage(t *testing.T) {
	elem := image()
	elem.Class("foo")
	elem.Crossorigin("foo")
	elem.Height("foo")
	elem.Href("foo")
	elem.Preserveaspectratio("foo")
	elem.Style("foo")
	elem.Transform("foo")
	elem.Width("foo")
	elem.X("foo")
	elem.Y("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}

func Teststop(t *testing.T) {
	elem := stop()
	elem.Class("foo")
	elem.Color("foo")
	elem.Core("foo", "bar")
	elem.Display("foo")
	elem.Id("foo")
	elem.Offset("foo", "bar")
	elem.Presentation("foo", "bar")
	elem.StopColor("foo", "bar")
	elem.StopOpacity("foo", "bar")
	elem.Style("foo")
	elem.Styling("foo", "bar")
	elem.Visibility("foo")

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnCancel(h)
	elem.OnCanplay(h)
	elem.OnCanplaythrough(h)
	elem.OnChange(h)
	elem.OnClick(h)
	elem.OnClose(h)
	elem.OnCopy(h)
	elem.OnCuechange(h)
	elem.OnCut(h)
	elem.OnDblclick(h)
	elem.OnDrag(h)
	elem.OnDragend(h)
	elem.OnDragenter(h)
	elem.OnDragleave(h)
	elem.OnDragover(h)
	elem.OnDragstart(h)
	elem.OnDrop(h)
	elem.OnDurationchange(h)
	elem.OnEmptied(h)
	elem.OnEnd(h)
	elem.OnEnded(h)
	elem.OnError(h)
	elem.OnFocus(h)
	elem.OnInput(h)
	elem.OnInvalid(h)
	elem.OnKeydown(h)
	elem.OnKeypress(h)
	elem.OnKeyup(h)
	elem.OnLoad(h)
	elem.OnLoadeddata(h)
	elem.OnLoadedmetadata(h)
	elem.OnLoadstart(h)
	elem.OnMousedown(h)
	elem.OnMouseenter(h)
	elem.OnMouseleave(h)
	elem.OnMousemove(h)
	elem.OnMouseout(h)
	elem.OnMouseover(h)
	elem.OnMouseup(h)
	elem.OnMousewheel(h)
	elem.OnPaste(h)
	elem.OnPause(h)
	elem.OnPlay(h)
	elem.OnPlaying(h)
	elem.OnProgress(h)
	elem.OnRatechange(h)
	elem.OnRepeat(h)
	elem.OnReset(h)
	elem.OnResize(h)
	elem.OnScroll(h)
	elem.OnSeeked(h)
	elem.OnSeeking(h)
	elem.OnSelect(h)
	elem.OnShow(h)
	elem.OnStalled(h)
	elem.OnSubmit(h)
	elem.OnSuspend(h)
	elem.OnTimeupdate(h)
	elem.OnToggle(h)
	elem.OnVolumechange(h)
	elem.OnWaiting(h)
	elem.Text("hello")
}

func TestfeFuncG(t *testing.T) {
	elem := feFuncG()

	h := func(ctx Context, e Event) {}
	elem.On("click", h)
	elem.OnBegin(h)
	elem.OnEnd(h)
	elem.OnRepeat(h)
	elem.Text("hello")
}
